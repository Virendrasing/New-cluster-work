vi deploy.yaml
 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.16.1 # Update the version of nginx from 1.14.2 to 1.16.1
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: DATABASE_HOST
          value: "mariadb-primary"
        - name: DATABASE_PORT_NUMBER
          value: "3306"
        - name: DRUPAL_DATABASE_USER
          value: "Farmer"
        - name: DATABASE_NAME
          value: "Farmer"
        - name: DATABASE_PASSWORD
          value: "Agro@I2I"	
        ports:
        - containerPort: 80

 1069  kubectl apply -f deploy.yaml -n apache
 1070  kubectl get all -n apache
 1071  kubectl get pvc -n apache
 1072  kubectl get all -n apache
 1073  kubectl delete -f deploy.yaml -n apache
 1074  vi deploy.yaml
 1075  kubectl apply -f deploy.yaml -n apache
 1076  kubectl get all -n apache
 1077  kubectl expose deployment nginx-deployment -n apache --type=LoadBalancer --port=80 --name=nginx
 1078  kubectl get svc -n apache
 1079  kubectl get pods -n apache
 1080  kubectl exec -it nginx-deployment-ff6655784-mhvvt -n apache -- /bin/bash
 1081  vi deploy.yaml
 1082  kubectl get pod/nginx-deployment-ff6655784-mhvvt -n apache -o yaml
 1083  kubectl exec -it nginx-deployment-ff6655784-mhvvt -n apache -- /bin/bash
       find . -name index.html
 1084  ll
 1085  cd web/
 1086  ll
 1087  kubectl cp assets nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1088  kubectl cp canvaskit nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1089  kubectl cp favicon.png nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1090  kubectl cp flutter_service_worker.js nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1091  kubectl cp icons nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1092  kubectl cp index.html nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1093  kubectl cp main.dart.js nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1094  kubectl cp manifest.json nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1095  kubectl cp version.json nginx-deployment-ff6655784-mhvvt:/usr/share/nginx/html -n apache
 1096  kubectl exec -it nginx-deployment-ff6655784-mhvvt -n apache -- /bin/bash
 1097  kubectl get pvc -n apache
 1098  kubectl get pods -n apache
 1099  kubectl cp assets nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1100  kubectl cp canvaskit nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1101  kubectl cp favicon.png nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1102  kubectl cp flutter_service_worker.js nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1103  kubectl cp icons nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1104  kubectl cp index.html nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1105  kubectl cp main.dart.js nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1106  kubectl cp manifest.json nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache
 1107  kubectl cp version.json nginx-deployment-ff6655784-nz6vx:/usr/share/nginx/html -n apache


apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: akashagro
  name: akashagro
spec:
  replicas: 1
  selector:
     matchLabels:
       app: akashagro
  template:
    metadata:
      labels:
        app: akashagro
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - us-east-1a
      containers:
      - image: 013153099871.dkr.ecr.us-east-1.amazonaws.com/newone:latest
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: DRUPAL_DATABASE_HOST
          value: "drupal-mariadb-primary"
        - name: DRUPAL_DATABASE_PORT_NUMBER
          value: "3306"
        - name: DRUPAL_DATABASE_USER
          value: "bn_drupal"
        - name: DRUPAL_DATABASE_NAME
          value: "bitnami_drupal"
        - name: DRUPAL_DATABASE_PASSWORD
          value: "nzFxjSa5Kj"
        - name: DRUPAL_PROFILE
          value: standard
        - name: DRUPAL_USERNAME
          value: user
        - name: DRUPAL_PASSWORD
          value: Admin
        - name: DRUPAL_EMAIL
          value: support@marmonim.com
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 500
          httpGet:
            path: /user/login
            port: http
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: drupal
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 500
          httpGet:
            path: /user/login
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/www/html
          name: drupal-data
      volumes:
      - name: drupal-data
        persistentVolumeClaim:
          claimName: drupal-data
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      hostAliases:
      - hostnames:
        - status.localhost
        ip: 127.0.0.1
      restartPolicy: Always
	  
	  
*********************************************************************	  
MYSQL DATABASE DETAILS FOR KEYCLOCK

db name : farmer, akashAuth, keycloak

user name for farmer and akashauth will be same as follow

username: Farmer

pwd: Agro@I2I

 

user name for keycloak will be as follow

username: key

pwd: Agro@I2I

has context menu	  




docker exec -i agro-db mysql -u Farmer -pAgro@I2I farmer < /home/ubuntu/backup/16May2023-12:00PM-farmer.sql
docker exec -i mysql_mysql_1 mysql -u key -pAgro@I2I keycloak < /home/ubuntu/backup/16May2023-12:00PM-keycloak.sql

 

 

docker exec -it mysql_mysql_1 mysql -u Farmer -pAgro@I2I -e "USE farmer; SHOW TABLES;"

*************************************

vi sc.yaml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ssd-local-path
provisioner: cluster.local/local-path-provisioner
parameters:
  nodePath: /data/ssd
allowVolumeExpansion: true
volumeBindingMode: Immediate
reclaimPolicy: Delete

kubectl apply -f sc.yaml
**************************************
vi pv.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: ssd-local-path
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
	
kubectl apply -f pv.yaml -n new-project
**************************************
vi pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: ssd-local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
	  
kubectl apply -f pvc.yaml -n new-project
******************************************
vi mysql-statefulset.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:8.0.26
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim



kubectl apply -f mysql-statefulset.yaml -n new-project
***************************
vi service.yaml

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app: mysql


kubectl apply -f service.yaml -n new-project
********************************************
vi keycloak-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: new-project
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:16.1.1
        env:
        - name: KEYCLOAK_USER
          value: "admin"
        - name: KEYCLOAK_PASSWORD
          value: "admin"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: DB_VENDOR
          value: mysql
        - name: DB_ADDR
          value: mysql
        - name: DB_DATABASE
          value: keycloak
        - name: DB_PORT
          value: "3306"
        - name: DB_USER
          value: key
        - name: DB_PASSWORD
          value: "Agro@I2I"
        - name: JGROUPS_DISCOVERY_PROTOCOL
          value: dns.DNS_PING
        - name: JGROUPS_DISCOVERY_PROPERTIES
          value: 'dns_query=external-mysql-db.iam'
        - name: CACHE_OWNERS_COUNT
          value: "2"
        - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
          value: "2"
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: 8080
          initialDelaySeconds: 30


kubectl apply -f keycloak-deployment.yaml -n new-project

******************************************************

FOR ANOTHER WAY TO CONFIGURE MYSQL AND KEYCLOAK

helm install mysql-keyclock bitnami/mysql --set primary.persistence.storageClass="openebs-hostpath"  --set secondary.persistence.storageClass="openebs-hostpath" --set auth.rootPassword="Agro@I2I" --set architecture=replication  --set secondary.replicaCount=1 --set auth.replicationPassword="Agro@I2I" --set=global.storageClass=openebs-hostpath --version 8.0.26 -n akash 

mysql -u root -p
pass-Agro@I2I

create user 'Farmer' identified by 'Agro@I2I';

GRANT ALL PRIVILEGES ON farmer.* TO 'Farmer'@'%';
GRANT ALL PRIVILEGES ON akashAuth.* TO 'Farmer'@'%';

mysql -u Farmer -p

CREATE DATABASE farmer;
CREATE DATABASE akashAuth;

mysql -u root -p
create user 'key' identified by 'Agro@I2I';
GRANT ALL PRIVILEGES ON keycloak.* TO 'key'@'%';

mysql -u key -p

CREATE DATABASE keycloak;



vi keycloak.sh

#! /bin/bash
### MySQL Server Login Info ###
DATE=$(date +%Y-%m-%d_%H-%M-%S)
DB_NAME="keycloak"
BACKUP_FILENAME="${DB_NAME}-${DATE}.sql"
kubectl exec mysql-858fcb86b5-cq5lv  -n new-project -- mysqldump -u root  -proot --triggers --single-transaction --quick  keycloak > "/tmp/mysql-backups/$BACKUP_FILENAME"

sudo chmod 777 keycloak.sh
crontab -e
0 */6 * * * /bin/bash /home/i2i/keycloak.sh


vi farmer.sh

#! /bin/bash
### MySQL Server Login Info ###
DATE=$(date +%Y-%m-%d_%H-%M-%S)
DB_NAME="farmer"
BACKUP_FILENAME="${DB_NAME}-${DATE}.sql"
kubectl exec mysql-858fcb86b5-cq5lv  -n new-project -- mysqldump -u root  -proot --triggers --single-transaction --quick  farmer > "/tmp/mysql-backups/$BACKUP_FILENAME"

sudo chmod 777 farmer.sh

sduo crontab -e

0 */6 * * * /bin/bash /home/i2i/farmer.sh

vi akashauth.sh

#! /bin/bash
### MySQL Server Login Info ###
DATE=$(date +%Y-%m-%d_%H-%M-%S)
DB_NAME="akashAuth"
BACKUP_FILENAME="${DB_NAME}-${DATE}.sql"
kubectl exec mysql-858fcb86b5-cq5lv  -n new-project -- mysqldump -u root  -proot --triggers --single-transaction --quick  akashAuth > "/tmp/mysql-backups/$BACKUP_FILENAME"

sudo chmod 777 akashauth.sh

sudo crontab -e
0 */6 * * * /bin/bash /home/i2i/akashAuth.sh

vi new-mysql-setup.yaml
  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: akash
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:12.0.3
        env:
        - name: KEYCLOAK_USER
          value: "admin"
        - name: KEYCLOAK_PASSWORD
          value: "admin"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: DB_VENDOR
          value: mysql
        - name: DB_ADDR
          value: mysql-keyclock-primary
        - name: DB_DATABASE
          value: keycloak
        - name: DB_PORT
          value: "3306"
        - name: DB_USER
          value: key
        - name: DB_PASSWORD
          value: "Agro@I2I"
        - name: JGROUPS_DISCOVERY_PROTOCOL
          value: dns.DNS_PING
        - name: JGROUPS_DISCOVERY_PROPERTIES
          value: 'dns_query=external-mysql-db.iam'
        - name: CACHE_OWNERS_COUNT
          value: "2"
        - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
          value: "2"
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: 8080
          initialDelaySeconds: 30
 
  kubectl apply -f new-mysql-setup.yaml -n akash
  kubectl get all -n akash
  kubectl expose pods keycloak-586978d7ff-f8x2q -n akash --type=NodePort --port=8080 --name=keycloak-new
  kubectl expose pods keycloak-587b7d7955-qspwm -n akash --type=NodePort --port=8080 --name=new-keycloak
  kubectl get all -n akash
  sudo ufw allow 30106/tcp
  kubectl exec -it pod/mysql-keyclock-primary-0 -n akash -- /bin/bash
  mysql -u key -p
CHECK DATABASES AND ITS DATA 

helm install my-release oci://registry-1.docker.io/bitnamicharts/tomcat -n akash --set=global.storageClass=openebs-hostpath
kubectl edit svc  my-release-tomcat -n akash
************************
SECOND TYPE TO DEPLOY TOMCAT WITH YAM FILE 

vi tomcat.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  tomcat-deployment-nautilus
  namespace: new-project
  labels:
    name: webdep
    app: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      name: webpod
      app: demo
  template:
    metadata:
      name: webpod
      labels:
        name: webpod
        app: demo
    spec:
      containers:
        - name: tomcat-container-nautilus
          image: tomcat:9.0.58
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: tomcat-service-nautilus
  namespace: new-project
spec:
  type: NodePort
  selector:
    name: webpod
    app: demo
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 8080
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 32227



cp -R * ../webapps (hit this command in tomcat-pod /usr/local/tomcat/webapps.dist on this path)


kubectl cp tomcat-7f448666f9-gtqll:/opt/bitnami/apache-tomcat/webapps/manager/META-INF/context.xml ./context.xml -n akash
     (copy context.xml from pod to local server path)
EDIT THIS FILE WITH FOLLOWING CHANGES 

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Context antiResourceLocking="false" privileged="true" >
  <CookieProcessor className="org.apache.tomcat.util.http.Rfc6265CookieProcessor"
                   sameSiteCookies="strict" />
  <!--<Valve className="org.apache.catalina.valves.RemoteAddrValve"
  allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />-->
  <Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"/>
</Context>

COPY THIS FILE WITH PODS FOLLOWING COMMAND
kubectl cp context.xml tomcat-7f448666f9-gtqll:/opt/bitnami/apache-tomcat/webapps/manager/META-INF/ -n akash	


COPY TOMCAT USERS.XML FILE WITH FOLLOWING COMMAND
kubectl cp my-release-tomcat-6cbd5c5bdc-q2xcp:/opt/bitnami/tomcat/conf/tomcat-users.xml ./tomcat-users.xml -n akash 

EDIT THIS FILE WITH FOLLOWING CONTENT
<role rolename="admin-gui"/>
<role rolename="admin-script"/>
<role rolename="manager-gui"/>
<role rolename="manager-status"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<user name="admin" password="admin" roles="admin-gui,admin-script,manager-gui,manager-status,manager-script,manager-jmx"/>
</tomcat-users> 
                (add content at last)

COPY THIS FILE TO PODS           
kubectl cp tomcat-users.xml my-release-tomcat-6cbd5c5bdc-q2xcp:/opt/bitnami/tomcat/conf/ -n akash

kubectl cp my-release-new-tomcat-78f6d7bbbb-kr879:/bitnami/tomcat/webapps/manager/WEB-INF/web.xml -n new-project ./web.xml
HIT IP WITH PORT
**********************************************

WORK OF  NGINX CONTROLLER.

helm install my-release nginx-stable/nginx-ingress -n new-project

kubectl create secret tls my-release-aakash-tls --namespace aakash-agro     --key Private.key     --cert server.crt

vi  treafic-ingress.yaml


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: new-keycloak
  namespace: new-project
    #  annotations:
    #    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - testpmo.ideastoimpacts.com
    secretName: my-release-new-keycloak-tls
  rules:
  - host: testpmo.ideastoimpacts.com
    http:
      paths:
        - pathType: Prefix
          path: /
          backend:
            service:
              name: new-keycloak
              port:
                number: 8080
				
kubectl apply -f treafic-ingress.yaml -n new-project

vi /etc/hosts
add following line in last
172.28.25.240 testpmo.ideastoimpacts.com				

kubectl get ing -n new-project
curl doamin-name
*************************************************************				
FOR SECOND DOMAIN MAP USE SECONF YAML FILE FOR APACHE TOMCAT

vi treafic-ingress-second.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-new-tomcat
  namespace: new-project
    #  annotations:
    #    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - farmerappuat.ideastoimpacts.com
    secretName: my-release-new-keycloak-tls
  rules:
  - host: farmerappuat.ideastoimpacts.com
    http:
      paths:
        - pathType: Prefix
          path: /
          backend:
            service:
              name: my-release-new-tomcat
              port:
                number: 80


kubectl apply -f treafic-ingress-second.yaml -n new-project

**********************************************************
 helm upgrade --install my-release bitnami/redmine --values /tmp/redmine.values -n test-redmine --set=global.storageClass=openebs-hostpath
 kubectl get pods -n test-redmine --watch


FOR THIRD DOMAIN MAP FOR REDMINE APPLICATION

vi treafic-ingress-redmine.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-redmine
  namespace: test-redmine
    #  annotations:
    #    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - testpmo.ideastoimpacts.com
    secretName: my-release-redmine-tls
  rules:
  - host: testpmo.ideastoimpacts.com
    http:
      paths:
        - pathType: Prefix
          path: /
          backend:
            service:
              name: my-release-redmine
              port:
                number: 80

kubectl apply -f treafic-ingress-redmine.yaml -n test-redmine

***********************************************************************8

KONG DEPLOYMENT 

KONGA DEPLOYMENT 

 sudo apt-get install nodejs
 2195  node --version
 2196  sudo apt-get install npm
 2197  free -h
 2198  npm --version
 2199  vi /etc/passwd
 2200  git clone https://github.com/pantsel/konga.git
 2201  ll
 2202  cd kong
 2203  cd ..
 2204  cd konga/
 2205  ls
 2206  npm i
 2207  free -h
 2208  cat .env_example
 2209  cp .env_example .env
 2210  vi .env
 2211  ufw allow 1337/tcp
 2212  sudo ufw allow 1337/tcp
 2213  npm start
